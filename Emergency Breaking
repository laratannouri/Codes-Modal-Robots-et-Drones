#!/usr/bin/env python3
import rospy
from sensor_msgs.msg import LaserScan 
from nav_msgs.msg import Odometry
from std_msgs.msg import Bool 
from ackermann_msgs.msg import AckermannDriveStamped 
import numpy as np
class Safety(object):

    def __init__(self):
        self.speed = 0
        rospy.Subscriber("scan", LaserScan, self.scan_callback)
        rospy.Subscriber("odom", Odometry, self.odom_callback)
        self.pub_mess = rospy.Publisher('brake', AckermannDriveStamped, queue_size=10)
        self.pub_break = rospy.Publisher('brake_bool', Bool, queue_size=10)
    
    def odom_callback(self, odom_msg):
        self.speed = odom_msg.twist.twist.linear.x
       
    def scan_callback(self, scan_msg):
        ttc = []
        ack_msg =  AckermannDriveStamped()
        brake_bool = False
        angle_min = scan_msg.angle_min
        inc = scan_msg.angle_increment
        for i in range (len(scan_msg.ranges)):
        	angle = angle_min + inc*i
        	dist = scan_msg.ranges[i]
        	r_v = max(self.speed*np.cos(angle),0.001)
        	ttc.append(dist / r_v)
        TTC = np.min(ttc)
        if (TTC<0.4):
        	ack_msg.drive.speed = 0.00
        	self.pub_mess.publish(ack_msg)
        	brake_bool= True
        	self.pub_break.publish(brake_bool)
    

def main():
    rospy.init_node('safety_node')
    sn = Safety()
    rospy.spin()
if __name__ == '__main__':
    main()
